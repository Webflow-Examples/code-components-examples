## Store Locator — Webflow Code Components + Webflow Cloud Example

This example demonstrates how to build a reusable React Store Locator as a Webflow Code Component, and a secure backend hosted on Webflow Cloud to fetch Webflow CMS data and Mapbox tiles/geocoding.

- Code Components docs: [developers.webflow.com/code-components](https://developers.webflow.com/code-components)
- Webflow Cloud getting started: [developers.webflow.com/webflow-cloud/getting-started](https://developers.webflow.com/webflow-cloud/getting-started)

### What you get

- A React Store Locator component that you can publish as a Code Component library and use inside Webflow projects
- A secure Astro backend designed for Webflow Cloud that:
  - Authenticates users with Webflow via BetterAuth
  - Fetches Webflow CMS items on behalf of the site
  - Issues short JWTs for embeds (no user session needed)
  - Proxies Mapbox styled tiles and geocoding using a site-specific Mapbox access token

---

## Quick Start

### 1) Prerequisites

- Node.js 20+
- Webflow account and a Webflow site
- Webflow CLI installed globally

```bash
npm install -g @webflow/webflow-cli
webflow --version
```

### 2) Clone and install

```bash
git clone <your-fork-or-repo>
cd store-locator
npm install
```

### 3) Configure environment variables

Copy `.dev.vars.example` to `.dev.vars` and fill the values:

```bash
cp .dev.vars.example .dev.vars
```

Required variables:

- BETTER_AUTH_SECRET: random long secret for JWT signing/verification
- PUBLIC_BETTER_AUTH_URL: the public base URL of your app (e.g., https://YOUR-SITE.webflow.io/map)
- WEBFLOW_CLIENT_ID / WEBFLOW_CLIENT_SECRET: OAuth app credentials for Webflow

Note: Mapbox access tokens are set per-site via the setup page and stored in the DB. They are not exposed to the browser directly.

### 4) Run locally

```bash
npm run dev
```

Open the setup page to connect your Webflow account and initialize site preferences:

```
/setup
```

Use this page to:

- Sign in with Webflow (BetterAuth)
- Save a site’s Mapbox token
- Select the CMS collection to read
- Generate a JWT for the embed

### 5) Publish the component as a Code Component library

This repo includes the component declaration file at `src/components/StoreLocator/StoreLocator.webflow.tsx`. After you’re ready to share the library, run:

```bash
npx webflow library share
```

Then install your shared library on your Webflow site and drag the component onto the canvas. See the Code Components docs for details: [developers.webflow.com/code-components](https://developers.webflow.com/code-components)

### 6) Deploy to Webflow Cloud

Follow the official guide: [developers.webflow.com/webflow-cloud/getting-started](https://developers.webflow.com/webflow-cloud/getting-started)

At a high level:

- Initialize or connect your GitHub repository
- Create a Webflow Cloud project and environment
- Set your environment variables for the environment (same as `.dev.vars`)
- Deploy:

```bash
webflow cloud deploy
```

Once deployed, use your Cloud environment URL as the `apiBaseUrl` prop in the Webflow Designer for the Store Locator component.

---

## How it works

### Frontend (Code Component)

- `src/components/StoreLocator/StoreLocator.tsx` and `StoreLocatorView.tsx` implement the UI using Leaflet
- `src/components/StoreLocator/StoreLocator.webflow.tsx` declares the component and exposes props such as:
  - `mapStyle` (e.g., Streets/Outdoors/Light/Dark/Satellite)
  - `distanceUnit` (Miles/Kilometers)
  - `apiBaseUrl` (base URL of your backend; your Webflow Cloud mount path)
  - `authToken` (JWT generated by the setup screen)

The component calls your backend to fetch locations and geocode addresses. It renders Mapbox tiles via a server-side proxy to keep the Mapbox token hidden.

### Backend (Astro on Webflow Cloud)

- Authentication with Webflow is handled by BetterAuth (`src/lib/auth.ts`)
  - Users sign in via the setup page to link Webflow and store per-site preferences
- JWT middleware (`src/middleware.ts`) validates tokens for protected routes and injects payload into `locals.authToken`
- Webflow CMS integration (`src/lib/webflow.ts` + `src/pages/api/*.ts`)
  - `/api/sites` fetches the user’s sites and stores them in the DB
  - `/api/collections?site_id=...` lists collections for a site
  - `/api/locations` returns items from the selected collection (uses JWT)
- Mapbox integration
  - `/api/sites/mapbox` stores a site’s Mapbox token
  - `/api/geocode` performs batch/single geocoding using the site’s token (uses JWT)
  - `/api/maps/tiles/[z]/[x]/[y].png?style=...&token=...` proxies styled tiles from Mapbox (uses JWT)
- JWT issuance
  - `/api/auth/generate-token` issues a short self-contained JWT used by the component to call protected endpoints

### Notable libs and helpers

- `src/lib/geo.ts` provides `getDistanceKm` and `kilometersToMiles`
- `src/lib/mapbox.ts` parses flexible Mapbox style inputs (e.g., `mapbox://styles/user/style`, `user/style`, `streets-v11`)

---

## Props to set in Webflow Designer

- `apiBaseUrl`: Your Webflow Cloud app base path (e.g., https://YOUR-SITE.webflow.io/map)
- `authToken`: Paste the JWT generated from the setup page
- `mapStyle`: One of the provided variants; the backend will parse and proxy tiles
- `distanceUnit`: Miles or Kilometers

---

## API overview

- `POST /api/auth/generate-token` → returns `{ token }` for the chosen `siteId` and `collectionId`
- `GET /api/sites` → lists sites for the authenticated user (used during setup)
- `GET /api/collections?site_id=...` → lists collections for that site (used during setup)
- `POST /api/sites/mapbox` → saves Mapbox token for a site (used during setup)
- `GET /api/locations` → returns an array of CMS items for the collection (JWT required)
- `POST /api/geocode` → batch geocode addresses (JWT required)
- `GET /api/geocode?address=...` → single geocode (JWT required)
- `GET /api/maps/tiles/{z}/{x}/{y}.png?style=...&token=...` → Mapbox tiles proxy (JWT required)

---

## Security notes

- The Mapbox token is stored server-side per site and never exposed directly to the client
- Protected endpoints require a Bearer JWT; validation happens in `src/middleware.ts`
- Tokens use a long expiry for demo purposes; reduce expiry for production

---

## Troubleshooting

- Seeing 401s from protected endpoints? Confirm the component has a valid `authToken` and your middleware is running
- Styles not loading? Ensure `mapStyle` is set and the tiles endpoint is reachable at your Cloud mount path
- Webflow API failures? Verify the authenticated user has access to the site and collection

---

## License

MIT — use, adapt, and share.
